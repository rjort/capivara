#!/usr/bin/env ruby
require 'gli'

begin # XXX: Remove this begin/rescue before distributing your app
  require 'capivara'
rescue LoadError
  warn 'In development, you need to use `bundle exec bin/capivara` to run your app'
  warn 'At install-time, RubyGems will make sure lib, etc. are in the load path'
  warn 'Feel free to remove this message from bin/capivara now'
  exit 64
end

class App
  extend GLI::App

  program_desc 'Generates templates for Capybara projects.'

  version Capivara::VERSION

  subcommand_option_handling :normal
  arguments :strict

  flag %i[T template], desc: "Use a template type. Verify the '/templates' directory",
                       default_value: 'default_front',
                       arg_name: 'template_name'

  skips_pre
  desc 'Create a new config file. It must be in the projects root directory.'
  command :config do |c|
    c.switch %i[i init], negatable: false, desc: 'Start new config file (capivara.json)'

    c.action do |_global_options, options, _args|
      config_command = Commands::Config.new

      if File.directory?('features') && options[:i]
        json_path = File.join(Dir.pwd, 'capivara.json')

        if !File.exist?(json_path)
          config_command.run_config(json_path)
        elsif File.exist?(json_path)
          warn 'The file already exists. Do you want to overwrite it? [y]es/[n]o'
          answer = $stdin.gets.chomp.downcase
          if %w[y yes].include?(answer)
            config_command.run_config(json_path)
          else
            warn "Config file #{File.basename(json_path)} not created".colorize(:yellow)
          end
        end
      else
        warn 'Features folder not exists'
      end
    end
  end

  desc 'Create a new project automation'
  command [:create, :c] do |c|
    c.flag %i[n new], desc: 'Create new project', arg_name: 'project_name'

    c.action do |_global_options, options, _args|
      create_key = Commands::Handlers::CreateHandler.project_folder_exists?(options[:n])

      exit unless create_key

      create_command = Commands::Create.new(options[:n])
      create_command.run_create
    end
  end

  desc 'Generate Gherkin, Page, Step and Section files'
  command [:generate, :g] do |c|
    c.flag %i[a all], desc: 'Create all files (Page, Gherkin, Step)', arg_name: 'file|path/file'
    c.flag %i[G gherkin], desc: 'Create a Gherkin file (.feature)', arg_name: 'path|my/gherkin'
    c.flag %i[p page], desc: 'Create a page object file (.rb)', arg_name: 'path|my/page'
    c.flag %i[s step], desc: 'Create a Step file (*_step.rb)', arg_name: 'path|my/step'
    c.flag %i[S section], desc: 'Create a Section file (.rb)', arg_name: 'path|my/section'

    c.action do |_global_options, _options, _args|
      generate_command = Commands::Generate.new
      config_file = JSON.parse(File.read('capivara.json'))
      value = generate_command.args[:arg]
      flag = generate_command.args[:flag]

      case flag
      when 'G', 'gherkin'
        file = File.join(config_file['gherkin_path'], value)
        full_path_file = File.join(file, "#{File.basename(file)}.feature")
        key = generate_command.check_if_file_exist(full_path_file)
        generate_command.run_generate(file, config_file['gherkin_path']) if key
      when 'p', 'page'
        file = File.join(config_file['pages_path'], value)
        full_path_file = File.join(file, "#{File.basename(file)}.rb")
        key = generate_command.check_if_file_exist(full_path_file)
        generate_command.run_generate(file, config_file['pages_path']) if key
      when 's', 'step'
        file = File.join(config_file['steps_path'], value)
        full_path_file = File.join(file, "#{File.basename(file)}_step.rb")
        key = generate_command.check_if_file_exist(full_path_file)
        generate_command.run_generate(file, config_file['steps_path']) if key
      when 'S', 'section'
        file = File.join(config_file['section_path'], value)
        full_path_file = File.join(file, "#{File.basename(file)}.rb")
        key = generate_command.check_if_file_exist(full_path_file)
        generate_command.run_generate(file, config_file['section_path']) if key
      when 'a', 'all'
        generate_command.run_all
      end
    end
  end

  pre do |global, command, options, _args|
    cmd_data = Commands::Handlers::CommandData

    # Para alguns casos, o valor da flag e a flag # ex: opt => [:gherkin, "teste/do/alguma_coisa"]
    opt = options.find { |_, value| !value.nil? }

    # Validar o valor do argumento
    Commands::Handlers::ValidateArgValue.valid_arguments?(opt[1])

    # NOTE: Adicionar dentro do IF algum pre a ser executado no comando CREATE
    if command.name == :create
      # Define o template a ser carregado para o comando CREATE
      cmd_data.template_type global[:template]
    end

    # NOTE: apenas para o comando generate
    if command.name == :generate
      # Envia para uma variavel de classe o simbolo da flag e o valor
      cmd_data.flag_options(opt)
      # cmd_data.validate_capivara_file('capivara.json')
      # config_file = Dir.glob('capivara.json')[0]
      # raise GLI::CustomExit.new('ConfigError', -2) if config_file.nil?
    end

    # Post logic here
    # Use skips_pre before a command to skip this
    # block on that command only
    true
  end

  # Adicionar todas as escrituras de arquivo aqui
  post do |_global, command, options, _args|
    writer = Commands::Handlers::WriteConfigs.new

    # options[:n] e o nome do projeto
    writer.write_configs_json_default("#{options[:n]}/capivara.json") if command.name == :create

    # executa dentro da pasta raiz do projeto
    writer.write_configs_json_default("#{Dir.pwd}/capivara.json") if command.name == :config

    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
    true
  end

  on_error do |exception|
    if exception.message == 'GenericError'
      warn 'An unmapped error occurred during the process execution, please try again'
      exit exception.exit_code
    end

    if exception.message == 'ConfigError'
      warn 'Settings not exists. Create a new config with: capivara config --init'
      exit exception.exit_code
    end

    true
  end
end

exit App.run(ARGV)
